input {
  file {
    path => "/usr/share/logstash/logs/windows/*.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "windows_csv"
  }
  file {
    path => "/usr/share/logstash/logs/linux/*.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "linux_csv"
  }
  file {
    path => "/usr/share/logstash/logs/windows/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "windows_log"
  }
  file {
    path => "/usr/share/logstash/logs/linux/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "linux_log"
  }
}

filter {
  # system tag
  if [type] =~ /^linux_/ {
    mutate { add_field => { "system" => "linux" } }
  }
  if [type] =~ /^windows_/ {
    mutate { add_field => { "system" => "windows" } }
  }

  # Filtr dla logów Windows .log
  if [type] == "windows_log" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{WORD:level} %{WORD:component} %{GREEDYDATA:content}" }
    }
    date {
      match => ["timestamp", "yyyy-MM-dd HH:mm:ss"]
      target => "@timestamp"
    }
  }

  # Filtr dla logów Linux .log
  if [type] == "linux_log" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{WORD:level} %{GREEDYDATA:content}" }
    }
    date {
      match => ["timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss"]
      target => "@timestamp"
    }
  }

  # Filtr dla logów CSV Windows
  if [type] == "windows_csv" {
    csv {
      separator => ","
      columns => ["LineId", "Date", "Time", "Level", "Component", "Content", "EventId", "EventTemplate"]
    }
    mutate {
      add_field => { "timestamp_raw" => "%{Date} %{Time}" }
    }
    date {
      match => ["timestamp_raw", "yyyy-MM-dd HH:mm:ss"]
      target => "@timestamp"
    }
  }

  # Filtr dla logów CSV Linux
  if [type] == "linux_csv" {
    csv {
      separator => ","
      columns => ["LineId", "Month", "Date", "Time", "Level", "Component", "PID", "Content", "EventId", "EventTemplate"]
    }
    mutate {
      add_field => { "timestamp_raw" => "%{Month} %{Date} %{Time}" }
    }
    date {
      match => ["timestamp_raw", "MMM d HH:mm:ss", "MMM dd HH:mm:ss"]
      target => "@timestamp"
    }
  }

  # Tagi dla błędów
  if [Level] =~ /ERROR/ or [level] =~ /ERROR/ {
    mutate {
      add_tag => ["error_log"]
    }
  }
}

output {
  # Debug (opcjonalne)
  # stdout {
  #   codec => rubydebug
  # }

  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "loghub-logs-%{+YYYY.MM.dd}"
  }
}
