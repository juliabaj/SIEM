input {
  file {
    path => "/usr/share/logstash/logs/windows/*.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "windows_csv"
  }
  file {
    path => "/usr/share/logstash/logs/linux/*.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "linux_csv"
  }
  file {
    path => "/usr/share/logstash/logs/windows/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "windows_log"
  }
  file {
    path => "/usr/share/logstash/logs/linux/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "linux_log"
  }
}

filter {
  ############################################################
  # SYSTEM FIELD
  ############################################################
  if [type] =~ /^linux_/ {
    mutate { add_field => { "system" => "linux" } }
  } else if [type] =~ /^windows_/ {
    mutate { add_field => { "system" => "windows" } }
  }

  ############################################################
  # WINDOWS LOG (.log)
  ############################################################
  if [type] == "windows_log" {
    grok {
      match => {
        "message" => "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time}, %{DATA:level}\s+%{WORD:component}\s+%{GREEDYDATA:content}"
      }
    }
    # jeśli mamy rok, parsujemy
    if [year] and [month] and [day] and [time] {
      mutate { add_field => { "timestamp_raw" => "%{year}-%{month}-%{day} %{time}" } }
      date {
        match   => ["timestamp_raw", "yyyy-MM-dd HH:mm:ss"]
        target  => "@timestamp"
        timezone=> "UTC"
      }
      mutate { remove_field => ["year","month","day","time","timestamp_raw"] }
    } else {
      drop {}   # odrzucamy, jeśli nagłówek nie ma roku
    }
  }

  ############################################################
  # LINUX LOG (.log) – tylko z pełną datą (z rokiem)
  ############################################################
  if [type] == "linux_log" {
    grok {
      match => {
        "message" => "%{SYSLOGTIMESTAMP:ts_partial} %{HOSTNAME:hostname} %{DATA:process}(?:\[%{NUMBER:pid}\])?: %{GREEDYDATA:content} at %{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR:year}"
      }
      tag_on_failure => []
    }

    if [year] {
      mutate {
        add_field => { "timestamp_raw" => "%{ts_partial} %{year}" }
      }
      date {
        match   => ["timestamp_raw", "MMM d HH:mm:ss YYYY", "MMM dd HH:mm:ss YYYY"]
        target  => "@timestamp"
        timezone=> "UTC"
      }
      mutate {
        remove_field => ["ts_partial","hostname","process","pid","content","timestamp_raw","year"]
      }
    } else {
      drop {}   # odrzucamy wszystkie bez roku
    }
  }

  ############################################################
  # WINDOWS CSV (.csv)
  ############################################################
  if [type] == "windows_csv" {
    csv {
      separator   => ","
      columns     => ["LineId","Date","Time","Level","Component","Content","EventId","EventTemplate"]
      skip_header => true
      skip_empty_rows => true
    }
    if [Date] and [Time] {
      mutate { add_field => { "timestamp_raw" => "%{Date} %{Time}" } }
      date {
        match   => ["timestamp_raw", "yyyy-MM-dd HH:mm:ss", "MM/dd/yyyy HH:mm:ss", "dd.MM.yyyy HH:mm:ss"]
        target  => "@timestamp"
        timezone=> "UTC"
      }
      mutate { remove_field => ["Date","Time","timestamp_raw"] }
    } else {
      drop {}
    }
  }

  ############################################################
  # LINUX CSV (.csv)
  ############################################################
  if [type] == "linux_csv" {
    csv {
      separator   => ","
      columns     => ["LineId","Month","Date","Time","Year","Level","Component","PID","Content","EventId","EventTemplate"]
      skip_header => true
      skip_empty_rows => true
    }
    if [Year] and [Month] and [Date] and [Time] {
      mutate { add_field => { "timestamp_raw" => "%{Month} %{Date} %{Time} %{Year}" } }
      date {
        match   => ["timestamp_raw", "MMM d HH:mm:ss YYYY", "MMM dd HH:mm:ss YYYY"]
        target  => "@timestamp"
        timezone=> "UTC"
      }
      mutate { remove_field => ["Month","Date","Time","Year","timestamp_raw"] }
    } else {
      drop {}
    }
  }

  ############################################################
  # TAGOWANIE POZIOMÓW LOGÓW
  ############################################################
  if [Level] =~ /(?i)error/  or [level] =~ /(?i)error/  { mutate { add_tag => ["error_log"]   } }
  if [Level] =~ /(?i)warn/   or [level] =~ /(?i)warn/   { mutate { add_tag => ["warning_log"] } }
  if [Level] =~ /(?i)info/   or [level] =~ /(?i)info/   { mutate { add_tag => ["info_log"]    } }

  # Dodatkowe czyszczenie
  if [message] == "" { drop {} }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "loghub-logs-%{+YYYY.MM.dd}"
  }
  # stdout { codec => rubydebug }   # odkomentuj, jeśli dalej debugujesz
}
