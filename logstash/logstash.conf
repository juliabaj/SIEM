input {
  file {
    path => "/usr/share/logstash/logs/Windows/*.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "windows_csv"
  }
  file {
    path => "/usr/share/logstash/logs/Linux/*.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "linux_csv"
  }
    file {
    path => "/usr/share/logstash/logs/Windows/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "windows_log"
  }
    file {
    path => "/usr/share/logstash/logs/Linux/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "linux_log"
  }
}

filter {
  # filtr dla log贸w windowsa
  if [type] == "windows_log" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{WORD:level} %{WORD:component} %{GREEDYDATA:content}" }
    }
  }

  # filtr dla log贸w linuxa
  if [type] == "linux_log" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{WORD:level} %{GREEDYDATA:content}" }
    }
  }

  # filtr dla log贸w csv windowsa
  if [type] == "windows_csv" {
    csv {
      separator => ","
      columns => ["LineId", "Date", "Time", "Level", "Component", "Content", "EventId", "EventTemplate"]
    }
  }

  # filtr dla log贸w csv linuxa
  if [type] == "linux_csv" {
    csv {
      separator => ","
      columns => ["LineId", "Month", "Date", "Time", "Level", "Component", "PID", "Content", "EventId", "EventTemplate"]
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "loghub-logs-%{+YYYY.MM.dd}"
  }
}
